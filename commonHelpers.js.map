{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nconst startBtn = document.querySelector('[data-start]');\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst timerValue = {\n    days: document.querySelector('[data-days]'),\n    hours: document.querySelector('[data-hours]'),\n    minutes: document.querySelector('[data-minutes]'),\n    seconds: document.querySelector('[data-seconds]'),\n};\n\nstartBtn.setAttribute('disabled', true);\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n    userSelectedDate = Date.parse(selectedDates[0]);\n\n    if (userSelectedDate > Date.now()) {\n        startBtn.removeAttribute('disabled');\n\n        startBtn.addEventListener('click', onStartBtnClick);\n        } else {\n        startBtn.setAttribute('disabled', true);\n\n        iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        backgroundColor: 'orangered',\n        messageColor: 'white',\n        close: false,\n        progressBar: false,\n        });\n    }\n\n    function onStartBtnClick() {\n        startBtn.setAttribute('disabled', true);\n        datetimePicker.setAttribute('disabled', true);\n\n        const interval = setInterval(() => {\n        const currentTime = Date.now();\n        const remainingTime = userSelectedDate - currentTime;\n        const convertedRemainingTime = convertMs(remainingTime);\n\n        Object.entries(convertedRemainingTime).forEach(([key, value]) => {\n            timerValue[key].textContent = addZero(value);\n        });\n        if (remainingTime < 1000) {\n            clearInterval(interval);\n        }\n        }, 1000);\n    }\n    },\n};\n\nfunction addZero(value) {\n    return value.toString().padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n    return { days, hours, minutes, seconds };\n}\n\nflatpickr(datetimePicker, options);"],"names":["userSelectedDate","startBtn","datetimePicker","timerValue","options","selectedDates","onStartBtnClick","iziToast","interval","currentTime","remainingTime","convertedRemainingTime","convertMs","key","value","addZero","ms","days","hours","minutes","seconds","flatpickr"],"mappings":"+IAKA,IAAIA,EACJ,MAAMC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAa,CACf,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACpD,EAEAF,EAAS,aAAa,WAAY,EAAI,EAEtC,MAAMG,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACvBL,EAAmB,KAAK,MAAMK,EAAc,CAAC,CAAC,EAE1CL,EAAmB,KAAK,OACxBC,EAAS,gBAAgB,UAAU,EAEnCA,EAAS,iBAAiB,QAASK,CAAe,IAElDL,EAAS,aAAa,WAAY,EAAI,EAEtCM,EAAS,MAAM,CACf,QAAS,qCACT,SAAU,WACV,gBAAiB,YACjB,aAAc,QACd,MAAO,GACP,YAAa,EACrB,CAAS,GAGL,SAASD,GAAkB,CACvBL,EAAS,aAAa,WAAY,EAAI,EACtCC,EAAe,aAAa,WAAY,EAAI,EAE5C,MAAMM,EAAW,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBC,EAAgBV,EAAmBS,EACnCE,EAAyBC,EAAUF,CAAa,EAEtD,OAAO,QAAQC,CAAsB,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC7DX,EAAWU,CAAG,EAAE,YAAcE,EAAQD,CAAK,CACvD,CAAS,EACGJ,EAAgB,KAChB,cAAcF,CAAQ,CAEzB,EAAE,GAAI,CACV,CACA,CACL,EAEA,SAASO,EAAQD,EAAO,CACpB,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CAC3C,CAEA,SAASF,EAAUI,EAAI,CAKnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEAC,EAAUnB,EAAgBE,CAAO"}